{"version":3,"sources":["assets/images/NobelPrizeIcon.jpeg","assets/images/loading.gif","Constants/ServerUrls.js","Services/fetchData.js","routes/routes.js","Components/PrizeCategory.jsx","Components/LoadingIndicator.js","Pages/NobelPrizeCategories/NobelPrizeCategories.jsx","Components/LaureatesSummary.js","Pages/NobelLaureates/NobelLaureates.jsx","Components/Footer.js","Components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GET_PRIZE_API","GET_LAUREATES_API","fetchData","route","requestUrl","Promise","resolve","reject","fetch","then","response","json","data","catch","error","routes","category","PrizeCategory","prizeCategory","Col","md","to","replace","Card","className","Img","variant","src","NobelPrizeLogo","Body","Title","LoadingIndicator","require","alt","React","Component","NobelPrizeCategories","state","prizeCategories","loadNobelPrizeCategoryData","a","getCategories","prizes","map","value","filter","index","_arr","indexOf","setState","console","this","length","CardDeck","categoryIndex","key","LaureatesSummary","laureatesList","year","details","log","Array","isArray","laureates","Index","laureatesDetails","find","x","id","Media","body","firstname","bornCountry","born","gender","style","border","NobelLaureates","selectedCategory","categoriesList","filteredCategories","prize","sort","b","loadNobelLaureatesData","props","match","params","sticky","laureatesItem","placeholder","Footer","href","Header","Navbar","bg","Brand","width","height","App","exact","path","component","withRouter","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6d17c151.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/NobelPrizeIcon.03a02e72.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/loading.81c29bc5.gif\";","export const PRIMARY_SERVER = \"http://api.nobelprize.org/v1\";\n\nexport const GET_PRIZE_API = \"/prize.json\";\n\nexport const GET_LAUREATES_API = \"/laureate.json\";\n\nexport const GET_COUNTRY_API = \"/country.json\";\n","import { PRIMARY_SERVER } from \"../Constants/ServerUrls\";\n\nconst fetchData = route => {\n  const requestUrl = PRIMARY_SERVER + route;\n\n  return new Promise((resolve, reject) => {\n    fetch(requestUrl)\n      .then(response => response.json())\n      .then(data => {\n        resolve(data);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  });\n};\n\nexport default fetchData;\n","const routes = {\n  category: \"/Nobel-Laureates/:category\"\n};\n\nexport default routes;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { NavLink } from \"react-router-dom\";\nimport routes from \"../routes/routes\";\nimport NobelPrizeLogo from \"../assets/images/NobelPrizeIcon.jpeg\";\nimport { Card, Col } from \"react-bootstrap/\";\n\nconst PrizeCategory = ({ prizeCategory = \"\" }) => {\n  return (\n    <Col md={3}>\n      <NavLink to={routes.category.replace(\":category\", prizeCategory)}>\n        <Card className=\"col-md-12\">\n          <Card.Img variant=\"top\" src={NobelPrizeLogo} />\n          <Card.Body>\n            <Card.Title>{prizeCategory}   </Card.Title>\n          </Card.Body>\n        </Card>\n      </NavLink>\n    </Col>\n  );\n};\n\nPrizeCategory.propTypes = {\n  prizeCategory: PropTypes.string.isRequired\n};\n\nexport default PrizeCategory;\n","import React from \"react\";\n\nclass LoadingIndicator extends React.Component {\n  render() {\n    return (\n      <div>\n        <img src={require(\"../assets/images/loading.gif\")} alt={\"loading\"} />\n      </div>\n    );\n  }\n}\n\nexport default LoadingIndicator;\n","import React, { Component } from \"react\";\nimport fetchData from \"../../Services/fetchData\";\nimport PrizeCategory from \"../../Components/PrizeCategory\";\nimport { GET_PRIZE_API } from \"../../Constants/ServerUrls\";\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\nimport { CardDeck } from \"react-bootstrap/\";\n\nclass NobelPrizeCategories extends Component {\n  state = {\n    prizeCategories: []\n  };\n  componentDidMount() {\n    this.loadNobelPrizeCategoryData();\n  }\n  loadNobelPrizeCategoryData = async () => {\n    try {\n      const getCategories = await fetchData(GET_PRIZE_API, \"GET\");\n      const prizeCategories = getCategories.prizes\n        .map(value => value.category)\n        .filter((value, index, _arr) => _arr.indexOf(value) === index);\n      this.setState({ prizeCategories });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  render() {\n    const { prizeCategories } = this.state;\n    return (\n      <div className=\"container\">\n        <h3 className=\"App\">Nobel Prize Categories</h3>\n\n        {prizeCategories.length ? (\n          <CardDeck className=\"col-md-12\">\n            {prizeCategories.map((category, categoryIndex) => {\n              return (\n                <PrizeCategory prizeCategory={category} key={categoryIndex} />\n              );\n            })}\n          </CardDeck>\n        ) : (\n          <LoadingIndicator />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default NobelPrizeCategories;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport LoadingIndicator from \"./LoadingIndicator\";\nimport { Media } from \"reactstrap\";\n\nconst LaureatesSummary = ({\n  laureatesList,\n  year = \"\",\n  category = \"\",\n  details\n}) => {\n  debugger;\n  console.log(laureatesList);\n  // console.log();\n  return (\n    <>\n      {Array.isArray(laureatesList) ? (\n        laureatesList.length ? (\n          laureatesList.map((laureates, Index) => {\n            debugger;\n            console.log(laureates);\n            let laureatesDetails = details.find(x => x.id === laureates.id);\n            return (\n              <>\n                <Media key={Index}>\n                  <Media body>\n                    <Media className=\"header-color\">\n                      <h2>{laureates.firstname}</h2>\n                    </Media>\n                    <Media>Year : {year}</Media>\n                    <Media>Prize Category : {category}</Media>\n                    <Media>\n                      Country :\n                      {laureatesDetails.bornCountry == null\n                        ? \"NA\"\n                        : laureatesDetails.bornCountry}\n                    </Media>\n                    <br />\n                    <Media>\n                      Date of Birth :\n                      {laureatesDetails.born == null\n                        ? \"NA\"\n                        : laureatesDetails.born}\n                    </Media>\n                    <Media>\n                      Gender :\n                      {laureatesDetails.gender == null\n                        ? \"NA\"\n                        : laureatesDetails.gender}\n                    </Media>\n                  </Media>\n                </Media>\n                <hr style={{ border: \"1px dashed crimson\" }} />\n              </>\n            );\n          })\n        ) : (\n          <LoadingIndicator />\n        )\n      ) : (\n        <Fragment></Fragment>\n      )}\n    </>\n  );\n};\n\nLaureatesSummary.propTypes = {\n  category: PropTypes.string.isRequired,\n  year: PropTypes.string.isRequired\n};\n\nexport default LaureatesSummary;\n","import React, { Component } from \"react\";\nimport fetchData from \"../../Services/fetchData\";\nimport { GET_PRIZE_API, GET_LAUREATES_API } from \"../../Constants/ServerUrls\";\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\nimport LaureatesSummary from \"../../Components/LaureatesSummary\";\nimport LazyLoad from \"react-lazyload\";\n\nclass NobelLaureates extends Component {\n  state = {\n    laureatesList: [],\n    selectedCategory: \"\",\n    laureatesDetails: []\n  };\n  componentDidMount() {\n    const { match = {} } = this.props;\n    debugger;\n    const { params = {} } = match;\n    const { category: selectedCategory = \"\" } = params;\n    this.setState({ selectedCategory: selectedCategory });\n    debugger;\n    this.loadNobelPrizeCategoryData();\n    debugger;\n    this.loadNobelLaureatesData();\n  }\n  loadNobelPrizeCategoryData = async () => {\n    try {\n      const categoriesList = await fetchData(GET_PRIZE_API, \"GET\");\n      const filteredCategories = categoriesList.prizes.filter(\n        prize => prize[\"category\"] === this.state.selectedCategory\n      );\n      const laureatesList = filteredCategories.sort((a, b) => b.year - a.year);\n      this.setState({ laureatesList });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  loadNobelLaureatesData = async () => {\n    try {\n      const laureatesDetails = await fetchData(GET_LAUREATES_API, \"GET\");\n      debugger;\n      console.log(laureatesDetails);\n\n      debugger;\n      this.setState({ laureatesDetails: laureatesDetails.laureates });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  render() {\n    const { laureatesList, laureatesDetails } = this.state;\n    debugger;\n    return (\n      <div className=\"container\">\n        <h3 className=\"App\" sticky=\"top\">\n          {\"Nobel Prize Winners\"}\n        </h3>\n        {laureatesList.length && laureatesDetails.length ? (\n          laureatesList.map((laureatesItem, Index) => {\n            return (\n              <LazyLoad key={Index} placeholder={<LoadingIndicator />}>\n                <LaureatesSummary\n                  laureatesList={laureatesItem.laureates}\n                  year={laureatesItem.year}\n                  category={laureatesItem.category}\n                  key={Index}\n                  details={laureatesDetails}\n                />\n              </LazyLoad>\n            );\n          })\n        ) : (\n          <LoadingIndicator />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default NobelLaureates;\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <footer className=\"page-footer font-small blue\">\n      <div className=\"footer-copyright text-center py-3\">\n        Made with &#10084; by Prasanna Balaji.\n        <a href=\"https://github.com/gsprasanna/Nobel-Laureates-App\"> Github</a>\n        <a href=\"https://twitter.com/Prasanna_GS_\"> Twitter</a>\n        <a href=\"https://linkedin.com/in/prasanna-balaji-gs\"> LinkedIn</a>\n      </div>\n    </footer>\n  );\n};\nexport default Footer;\n","import React from \"react\";\nimport { Navbar } from \"react-bootstrap\";\nimport NobelPrizeLogo from \"../assets/images/NobelPrizeIcon.jpeg\";\n\nconst Header = () => {\n  return (\n    <>\n      <Navbar bg=\"info\" variant=\"dark\" sticky=\"top\">\n        <Navbar.Brand href=\"https://gsprasanna.github.io/\">\n          <img\n            alt=\"logo\"\n            src={NobelPrizeLogo}\n            width=\"30\"\n            height=\"30\"\n            className=\"d-inline-block align-top\"\n          />\n          {\"THE NOBEL PRIZE\"}\n        </Navbar.Brand>\n      </Navbar>\n    </>\n  );\n};\nexport default Header;\n","import React, { Component } from \"react\";\nimport { Route, withRouter } from \"react-router-dom\";\nimport \"./App.css\";\nimport NobelPrizeCategories from \"./Pages/NobelPrizeCategories/NobelPrizeCategories\";\nimport routes from \"./routes/routes\";\nimport NobelLaureates from \"./Pages/NobelLaureates/NobelLaureates\";\nimport Footer from \"./Components/Footer\";\nimport Header from \"./Components/Header\";\n\nclass App extends Component {\n  state = {};\n  render() {\n    return (\n      <div>\n        <Header />\n        <Route\n          exact\n          path=\"/Nobel-Laureates/\"\n          component={NobelPrizeCategories}\n        />\n        <Route exact path={routes.category} component={NobelLaureates} />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}